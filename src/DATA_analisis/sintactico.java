
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package DATA_analisis;

import java_cup.runtime.*;
import java.util.LinkedList;
import funciones.*;
import Reportes.ErroresLex;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\011\012\000" +
    "\002\011\015\000\002\012\015\000\002\012\017\000\002" +
    "\012\017\000\002\012\015\000\002\012\021\000\002\012" +
    "\017\000\002\012\015\000\002\012\015\000\002\010\010" +
    "\000\002\010\010\000\002\010\010\000\002\010\010\000" +
    "\002\010\010\000\002\010\010\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\010\006\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\015\003\000\002\015\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\010\000" +
    "\002\007\010\000\002\007\010\000\002\007\010\000\002" +
    "\007\010\000\002\007\010\000\002\007\010\000\002\007" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\010\000" +
    "\002\007\010\000\002\007\010\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\004\024\005\001\002\000\004\002\365\001" +
    "\002\000\026\003\017\016\013\033\016\042\023\043\006" +
    "\044\015\045\012\046\010\047\024\051\022\001\002\000" +
    "\004\006\356\001\002\000\030\003\ufffd\016\ufffd\025\ufffd" +
    "\033\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\051\ufffd\001\002\000\004\006\347\001\002\000\030" +
    "\003\ufffc\016\ufffc\025\ufffc\033\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\051\ufffc\001\002\000\004" +
    "\006\340\001\002\000\004\020\305\001\002\000\030\003" +
    "\ufffe\016\ufffe\025\ufffe\033\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\051\ufffe\001\002\000\004\006" +
    "\276\001\002\000\004\020\237\001\002\000\004\007\236" +
    "\001\002\000\030\003\ufffb\016\ufffb\025\ufffb\033\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\051\ufffb" +
    "\001\002\000\030\003\017\016\013\025\235\033\016\042" +
    "\023\043\006\044\015\045\012\046\010\047\024\051\022" +
    "\001\002\000\004\020\172\001\002\000\004\006\163\001" +
    "\002\000\004\006\025\001\002\000\016\010\034\011\032" +
    "\012\027\013\031\031\026\034\030\001\002\000\042\010" +
    "\034\011\032\012\027\013\031\034\030\035\042\036\046" +
    "\037\037\040\041\041\036\042\023\043\006\044\015\045" +
    "\012\046\010\047\024\001\002\000\014\005\uffd8\014\uffd8" +
    "\022\uffd8\023\uffd8\032\uffd8\001\002\000\014\005\uffd7\014" +
    "\uffd7\022\uffd7\023\uffd7\032\uffd7\001\002\000\014\005\uffd9" +
    "\014\uffd9\022\uffd9\023\uffd9\032\uffd9\001\002\000\014\005" +
    "\uffda\014\uffda\022\uffda\023\uffda\032\uffda\001\002\000\004" +
    "\005\035\001\002\000\014\005\uffdb\014\uffdb\022\uffdb\023" +
    "\uffdb\032\uffdb\001\002\000\040\003\uffe4\005\uffe4\014\uffe4" +
    "\016\uffe4\022\uffe4\025\uffe4\032\uffe4\033\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\001\002" +
    "\000\004\006\146\001\002\000\004\006\131\001\002\000" +
    "\006\014\127\032\uffde\001\002\000\004\006\112\001\002" +
    "\000\004\006\075\001\002\000\006\014\073\032\uffe0\001" +
    "\002\000\004\032\071\001\002\000\006\014\067\032\uffdf" +
    "\001\002\000\004\006\047\001\002\000\034\010\050\012" +
    "\052\035\042\036\046\037\037\040\041\041\036\042\023" +
    "\043\006\044\015\045\012\046\010\047\024\001\002\000" +
    "\006\005\uffc2\014\uffc2\001\002\000\004\014\062\001\002" +
    "\000\006\005\uffc1\014\uffc1\001\002\000\006\005\uffc0\014" +
    "\uffc0\001\002\000\004\014\055\001\002\000\034\010\050" +
    "\012\052\035\042\036\046\037\037\040\041\041\036\042" +
    "\023\043\006\044\015\045\012\046\010\047\024\001\002" +
    "\000\004\005\061\001\002\000\004\005\060\001\002\000" +
    "\012\005\uffd5\014\uffd5\022\uffd5\032\uffd5\001\002\000\012" +
    "\005\uffcb\014\uffcb\022\uffcb\032\uffcb\001\002\000\034\010" +
    "\050\012\052\035\042\036\046\037\037\040\041\041\036" +
    "\042\023\043\006\044\015\045\012\046\010\047\024\001" +
    "\002\000\004\005\066\001\002\000\004\005\065\001\002" +
    "\000\012\005\uffd0\014\uffd0\022\uffd0\032\uffd0\001\002\000" +
    "\012\005\uffc6\014\uffc6\022\uffc6\032\uffc6\001\002\000\042" +
    "\010\034\011\032\012\027\013\031\034\030\035\042\036" +
    "\046\037\037\040\041\041\036\042\023\043\006\044\015" +
    "\045\012\046\010\047\024\001\002\000\004\032\uffe2\001" +
    "\002\000\004\005\072\001\002\000\040\003\uffea\005\uffea" +
    "\014\uffea\016\uffea\022\uffea\025\uffea\032\uffea\033\uffea\042" +
    "\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\051\uffea" +
    "\001\002\000\042\010\034\011\032\012\027\013\031\034" +
    "\030\035\042\036\046\037\037\040\041\041\036\042\023" +
    "\043\006\044\015\045\012\046\010\047\024\001\002\000" +
    "\004\032\uffe3\001\002\000\034\010\050\012\052\035\042" +
    "\036\046\037\037\040\041\041\036\042\023\043\006\044" +
    "\015\045\012\046\010\047\024\001\002\000\004\014\105" +
    "\001\002\000\004\014\100\001\002\000\034\010\050\012" +
    "\052\035\042\036\046\037\037\040\041\041\036\042\023" +
    "\043\006\044\015\045\012\046\010\047\024\001\002\000" +
    "\004\005\104\001\002\000\004\005\103\001\002\000\012" +
    "\005\uffd6\014\uffd6\022\uffd6\032\uffd6\001\002\000\012\005" +
    "\uffcc\014\uffcc\022\uffcc\032\uffcc\001\002\000\034\010\050" +
    "\012\052\035\042\036\046\037\037\040\041\041\036\042" +
    "\023\043\006\044\015\045\012\046\010\047\024\001\002" +
    "\000\004\005\111\001\002\000\004\005\110\001\002\000" +
    "\012\005\uffd1\014\uffd1\022\uffd1\032\uffd1\001\002\000\012" +
    "\005\uffc7\014\uffc7\022\uffc7\032\uffc7\001\002\000\034\010" +
    "\050\012\052\035\042\036\046\037\037\040\041\041\036" +
    "\042\023\043\006\044\015\045\012\046\010\047\024\001" +
    "\002\000\004\014\122\001\002\000\004\014\115\001\002" +
    "\000\034\010\050\012\052\035\042\036\046\037\037\040" +
    "\041\041\036\042\023\043\006\044\015\045\012\046\010" +
    "\047\024\001\002\000\004\005\121\001\002\000\004\005" +
    "\120\001\002\000\012\005\uffd3\014\uffd3\022\uffd3\032\uffd3" +
    "\001\002\000\012\005\uffc9\014\uffc9\022\uffc9\032\uffc9\001" +
    "\002\000\034\010\050\012\052\035\042\036\046\037\037" +
    "\040\041\041\036\042\023\043\006\044\015\045\012\046" +
    "\010\047\024\001\002\000\004\005\126\001\002\000\004" +
    "\005\125\001\002\000\012\005\uffce\014\uffce\022\uffce\032" +
    "\uffce\001\002\000\012\005\uffc4\014\uffc4\022\uffc4\032\uffc4" +
    "\001\002\000\042\010\034\011\032\012\027\013\031\034" +
    "\030\035\042\036\046\037\037\040\041\041\036\042\023" +
    "\043\006\044\015\045\012\046\010\047\024\001\002\000" +
    "\004\032\uffe1\001\002\000\034\010\050\012\052\035\042" +
    "\036\046\037\037\040\041\041\036\042\023\043\006\044" +
    "\015\045\012\046\010\047\024\001\002\000\004\014\141" +
    "\001\002\000\004\014\134\001\002\000\034\010\050\012" +
    "\052\035\042\036\046\037\037\040\041\041\036\042\023" +
    "\043\006\044\015\045\012\046\010\047\024\001\002\000" +
    "\004\005\140\001\002\000\004\005\137\001\002\000\012" +
    "\005\uffd4\014\uffd4\022\uffd4\032\uffd4\001\002\000\012\005" +
    "\uffca\014\uffca\022\uffca\032\uffca\001\002\000\034\010\050" +
    "\012\052\035\042\036\046\037\037\040\041\041\036\042" +
    "\023\043\006\044\015\045\012\046\010\047\024\001\002" +
    "\000\004\005\145\001\002\000\004\005\144\001\002\000" +
    "\012\005\uffcf\014\uffcf\022\uffcf\032\uffcf\001\002\000\012" +
    "\005\uffc5\014\uffc5\022\uffc5\032\uffc5\001\002\000\034\010" +
    "\050\012\052\035\042\036\046\037\037\040\041\041\036" +
    "\042\023\043\006\044\015\045\012\046\010\047\024\001" +
    "\002\000\004\014\156\001\002\000\004\014\151\001\002" +
    "\000\034\010\050\012\052\035\042\036\046\037\037\040" +
    "\041\041\036\042\023\043\006\044\015\045\012\046\010" +
    "\047\024\001\002\000\004\005\155\001\002\000\004\005" +
    "\154\001\002\000\012\005\uffd2\014\uffd2\022\uffd2\032\uffd2" +
    "\001\002\000\012\005\uffc8\014\uffc8\022\uffc8\032\uffc8\001" +
    "\002\000\034\010\050\012\052\035\042\036\046\037\037" +
    "\040\041\041\036\042\023\043\006\044\015\045\012\046" +
    "\010\047\024\001\002\000\004\005\162\001\002\000\004" +
    "\005\161\001\002\000\012\005\uffcd\014\uffcd\022\uffcd\032" +
    "\uffcd\001\002\000\012\005\uffc3\014\uffc3\022\uffc3\032\uffc3" +
    "\001\002\000\016\010\034\011\032\012\027\013\031\031" +
    "\164\034\030\001\002\000\042\010\034\011\032\012\027" +
    "\013\031\034\030\035\042\036\046\037\037\040\041\041" +
    "\036\042\023\043\006\044\015\045\012\046\010\047\024" +
    "\001\002\000\004\005\166\001\002\000\040\003\uffe9\005" +
    "\uffe9\014\uffe9\016\uffe9\022\uffe9\025\uffe9\032\uffe9\033\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\051" +
    "\uffe9\001\002\000\004\032\170\001\002\000\004\005\171" +
    "\001\002\000\040\003\uffef\005\uffef\014\uffef\016\uffef\022" +
    "\uffef\025\uffef\032\uffef\033\uffef\042\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\047\uffef\051\uffef\001\002\000\004\020" +
    "\173\001\002\000\006\050\174\052\175\001\002\000\004" +
    "\015\211\001\002\000\004\015\176\001\002\000\014\010" +
    "\034\011\032\012\027\013\031\034\030\001\002\000\004" +
    "\023\200\001\002\000\004\026\201\001\002\000\006\031" +
    "\202\034\204\001\002\000\042\010\034\011\032\012\027" +
    "\013\031\034\030\035\042\036\046\037\037\040\041\041" +
    "\036\042\023\043\006\044\015\045\012\046\010\047\024" +
    "\001\002\000\004\022\205\001\002\000\004\022\uffdd\001" +
    "\002\000\004\007\206\001\002\000\030\003\ufff8\016\ufff8" +
    "\025\ufff8\033\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\051\ufff8\001\002\000\004\032\210\001\002" +
    "\000\004\022\uffdc\001\002\000\036\010\214\011\212\012" +
    "\215\035\042\036\046\037\037\040\041\041\036\042\023" +
    "\043\006\044\015\045\012\046\010\047\024\001\002\000" +
    "\006\014\232\022\uffb9\001\002\000\004\022\230\001\002" +
    "\000\006\014\226\022\uffba\001\002\000\006\014\224\022" +
    "\uffb8\001\002\000\006\014\222\022\uffb7\001\002\000\006" +
    "\014\220\022\uffb6\001\002\000\036\010\214\011\212\012" +
    "\215\035\042\036\046\037\037\040\041\041\036\042\023" +
    "\043\006\044\015\045\012\046\010\047\024\001\002\000" +
    "\004\022\uffbb\001\002\000\036\010\214\011\212\012\215" +
    "\035\042\036\046\037\037\040\041\041\036\042\023\043" +
    "\006\044\015\045\012\046\010\047\024\001\002\000\004" +
    "\022\uffbc\001\002\000\036\010\214\011\212\012\215\035" +
    "\042\036\046\037\037\040\041\041\036\042\023\043\006" +
    "\044\015\045\012\046\010\047\024\001\002\000\004\022" +
    "\uffbd\001\002\000\036\010\214\011\212\012\215\035\042" +
    "\036\046\037\037\040\041\041\036\042\023\043\006\044" +
    "\015\045\012\046\010\047\024\001\002\000\004\022\uffbf" +
    "\001\002\000\004\007\231\001\002\000\030\003\ufff9\016" +
    "\ufff9\025\ufff9\033\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\051\ufff9\001\002\000\036\010\214\011" +
    "\212\012\215\035\042\036\046\037\037\040\041\041\036" +
    "\042\023\043\006\044\015\045\012\046\010\047\024\001" +
    "\002\000\004\022\uffbe\001\002\000\030\003\uffff\016\uffff" +
    "\025\uffff\033\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046" +
    "\uffff\047\uffff\051\uffff\001\002\000\004\002\000\001\002" +
    "\000\030\003\ufffa\016\ufffa\025\ufffa\033\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\001\002" +
    "\000\006\017\240\030\241\001\002\000\004\020\261\001" +
    "\002\000\004\031\242\001\002\000\004\032\243\001\002" +
    "\000\004\020\244\001\002\000\004\020\245\001\002\000" +
    "\004\034\246\001\002\000\004\021\247\001\002\000\004" +
    "\023\250\001\002\000\016\010\034\011\032\012\027\013" +
    "\031\031\251\034\030\001\002\000\042\010\034\011\032" +
    "\012\027\013\031\034\030\035\042\036\046\037\037\040" +
    "\041\041\036\042\023\043\006\044\015\045\012\046\010" +
    "\047\024\001\002\000\004\022\253\001\002\000\004\007" +
    "\254\001\002\000\030\003\ufff2\016\ufff2\025\ufff2\033\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\051" +
    "\ufff2\001\002\000\004\032\256\001\002\000\004\022\257" +
    "\001\002\000\004\007\260\001\002\000\030\003\ufff3\016" +
    "\ufff3\025\ufff3\033\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\051\ufff3\001\002\000\004\020\262\001" +
    "\002\000\004\034\263\001\002\000\004\021\264\001\002" +
    "\000\004\023\265\001\002\000\016\010\034\011\032\012" +
    "\027\013\031\031\266\034\030\001\002\000\042\010\034" +
    "\011\032\012\027\013\031\034\030\035\042\036\046\037" +
    "\037\040\041\041\036\042\023\043\006\044\015\045\012" +
    "\046\010\047\024\001\002\000\004\022\270\001\002\000" +
    "\004\007\271\001\002\000\030\003\ufff4\016\ufff4\025\ufff4" +
    "\033\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\051\ufff4\001\002\000\004\032\273\001\002\000\004" +
    "\022\274\001\002\000\004\007\275\001\002\000\030\003" +
    "\ufff5\016\ufff5\025\ufff5\033\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\051\ufff5\001\002\000\016\010" +
    "\034\011\032\012\027\013\031\031\277\034\030\001\002" +
    "\000\042\010\034\011\032\012\027\013\031\034\030\035" +
    "\042\036\046\037\037\040\041\041\036\042\023\043\006" +
    "\044\015\045\012\046\010\047\024\001\002\000\004\005" +
    "\301\001\002\000\040\003\uffe7\005\uffe7\014\uffe7\016\uffe7" +
    "\022\uffe7\025\uffe7\032\uffe7\033\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\001\002\000\004" +
    "\032\303\001\002\000\004\005\304\001\002\000\040\003" +
    "\uffed\005\uffed\014\uffed\016\uffed\022\uffed\025\uffed\032\uffed" +
    "\033\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\051\uffed\001\002\000\006\017\306\030\307\001\002" +
    "\000\004\020\322\001\002\000\004\031\310\001\002\000" +
    "\004\032\311\001\002\000\004\020\312\001\002\000\004" +
    "\020\313\001\002\000\004\012\314\001\002\000\004\021" +
    "\315\001\002\000\004\023\316\001\002\000\014\010\034" +
    "\011\032\012\027\013\031\034\030\001\002\000\004\022" +
    "\320\001\002\000\004\007\321\001\002\000\030\003\ufff6" +
    "\016\ufff6\025\ufff6\033\ufff6\042\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\051\ufff6\001\002\000\004\020\323" +
    "\001\002\000\004\012\324\001\002\000\004\021\325\001" +
    "\002\000\004\023\326\001\002\000\042\010\034\011\032" +
    "\012\027\013\031\034\030\035\042\036\046\037\037\040" +
    "\041\041\036\042\023\043\006\044\015\045\012\046\010" +
    "\047\024\001\002\000\004\022\336\001\002\000\004\022" +
    "\334\001\002\000\004\022\332\001\002\000\004\007\333" +
    "\001\002\000\030\003\ufff1\016\ufff1\025\ufff1\033\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1" +
    "\001\002\000\004\007\335\001\002\000\030\003\ufff7\016" +
    "\ufff7\025\ufff7\033\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\051\ufff7\001\002\000\004\007\337\001" +
    "\002\000\030\003\ufff0\016\ufff0\025\ufff0\033\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\001" +
    "\002\000\016\010\034\011\032\012\027\013\031\031\341" +
    "\034\030\001\002\000\042\010\034\011\032\012\027\013" +
    "\031\034\030\035\042\036\046\037\037\040\041\041\036" +
    "\042\023\043\006\044\015\045\012\046\010\047\024\001" +
    "\002\000\004\005\343\001\002\000\040\003\uffe6\005\uffe6" +
    "\014\uffe6\016\uffe6\022\uffe6\025\uffe6\032\uffe6\033\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6" +
    "\001\002\000\004\032\345\001\002\000\004\005\346\001" +
    "\002\000\040\003\uffec\005\uffec\014\uffec\016\uffec\022\uffec" +
    "\025\uffec\032\uffec\033\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\051\uffec\001\002\000\016\010\034" +
    "\011\032\012\027\013\031\031\350\034\030\001\002\000" +
    "\042\010\034\011\032\012\027\013\031\034\030\035\042" +
    "\036\046\037\037\040\041\041\036\042\023\043\006\044" +
    "\015\045\012\046\010\047\024\001\002\000\004\005\352" +
    "\001\002\000\040\003\uffe5\005\uffe5\014\uffe5\016\uffe5\022" +
    "\uffe5\025\uffe5\032\uffe5\033\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\051\uffe5\001\002\000\004\032" +
    "\354\001\002\000\004\005\355\001\002\000\040\003\uffeb" +
    "\005\uffeb\014\uffeb\016\uffeb\022\uffeb\025\uffeb\032\uffeb\033" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb" +
    "\051\uffeb\001\002\000\016\010\034\011\032\012\027\013" +
    "\031\031\357\034\030\001\002\000\042\010\034\011\032" +
    "\012\027\013\031\034\030\035\042\036\046\037\037\040" +
    "\041\041\036\042\023\043\006\044\015\045\012\046\010" +
    "\047\024\001\002\000\004\005\361\001\002\000\040\003" +
    "\uffe8\005\uffe8\014\uffe8\016\uffe8\022\uffe8\025\uffe8\032\uffe8" +
    "\033\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\051\uffe8\001\002\000\004\032\363\001\002\000\004" +
    "\005\364\001\002\000\040\003\uffee\005\uffee\014\uffee\016" +
    "\uffee\022\uffee\025\uffee\032\uffee\033\uffee\042\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\047\uffee\051\uffee\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\020\005\013\010\017\011\006\012\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\233\010\017\011\006" +
    "\012\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\032\001\001\000\012\004\043" +
    "\006\042\007\044\010\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\053\010\052" +
    "\013\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\056\010\052\013\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\063\010\052\013\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\067\006\042\007\044\010\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\073" +
    "\006\042\007\044\010\037\001\001\000\002\001\001\000" +
    "\010\007\076\010\052\013\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\101\010\052\013\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\106\010\052\013\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\113\010\052\013\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\116" +
    "\010\052\013\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\123" +
    "\010\052\013\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\127" +
    "\006\042\007\044\010\037\001\001\000\002\001\001\000" +
    "\010\007\132\010\052\013\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\135\010\052\013\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\142\010\052\013\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\147\010\052\013\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\152" +
    "\010\052\013\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\157" +
    "\010\052\013\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\164" +
    "\001\001\000\012\004\166\006\042\007\044\010\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\202\001\001\000\012\004\206\006\042\007\044" +
    "\010\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\216\010\215\014\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\216\010\215\014\220\001\001\000\002\001\001\000\010" +
    "\007\216\010\215\014\222\001\001\000\002\001\001\000" +
    "\010\007\216\010\215\014\224\001\001\000\002\001\001" +
    "\000\010\007\216\010\215\014\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\216" +
    "\010\215\014\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\251\001\001\000" +
    "\012\004\254\006\042\007\044\010\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\266\001\001\000\012\004\271" +
    "\006\042\007\044\010\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\277\001\001\000\012\004\301\006\042\007\044\010\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\327\007\330\010\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\341\001" +
    "\001\000\012\004\343\006\042\007\044\010\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\350\001\001" +
    "\000\012\004\352\006\042\007\044\010\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\357\001\001\000" +
    "\012\004\361\006\042\007\044\010\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 
    public static LinkedList<ErroresLex> errorsitos = new LinkedList<ErroresLex>();
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: no se espera "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            errorsitos.add(new ErroresLex("Error Sintactico" ,s.value + "",  (s.right ) + 1, (s.left) + 1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            errorsitos.add(new ErroresLex("Error Sintactico" , s.value + "",  (s.right ) + 1, (s.left) + 1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {

  
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM listainstr ENDPROGRAM 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstr ::= listainstr instruccion 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("listainstr",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstr ::= instruccion 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("listainstr",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= printN 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= funciones 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= error PYC 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // printN ::= CONSOLE DOSP DOSP PRINT IGUAL imp END PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 funciones.Ejecucion.Print(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("printN",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // printN ::= CONSOLE DOSP DOSP COLUMN IGUAL expresion GUION MAYORQ arrays END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 funciones.Ejecucion.PrintArr(val, variable.toString()); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("printN",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable ::= VARIABLE DOSP DOUBLEVARIABLE DOSP DOSP ID MENORQ GUION expresion END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		funciones.Ejecucion.tablaVariables.put(variable.toString(), val.toString());  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable ::= VARIABLE DOSP CHARVAR CORIZQ CORDER DOSP DOSP ID MENORQ GUION expresion END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		funciones.Ejecucion.tablaVariables.put(variable.toString(), val.toString()); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable ::= ARROBA DOSP DOUBLEVARIABLE DOSP DOSP IDARROBA MENORQ GUION CORIZQ listaValores CORDER END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		funciones.Ejecucion.tablaVariables.put(variable.toString(), (LinkedList<Double>)  val); funciones.Ejecucion.mostrarTablaVariables();
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable ::= ARROBA DOSP DOUBLEVARIABLE DOSP DOSP IDARROBA MENORQ GUION expresion END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		funciones.Ejecucion.tablaVariables.put(variable.toString(), (LinkedList<Double>)  val); funciones.Ejecucion.mostrarTablaVariables();
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable ::= ARROBA DOSP CHARVAR CORIZQ CORDER DOSP DOSP IDARROBA MENORQ GUION CORIZQ listaValores CORDER END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		funciones.Ejecucion.tablaVariables.put(variable.toString(), (LinkedList<String>) val); funciones.Ejecucion.mostrarTablaVariables(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variable ::= ARROBA DOSP CHARVAR CORIZQ CORDER DOSP DOSP IDARROBA MENORQ GUION expresion END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		funciones.Ejecucion.tablaVariables.put(variable.toString(), (LinkedList<String>) val); funciones.Ejecucion.mostrarTablaVariables(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable ::= VARIABLE DOSP DOUBLEVARIABLE DOSP DOSP ID MENORQ GUION operaciones END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		funciones.Ejecucion.tablaVariables.put(variable.toString(), val.toString() ); funciones.Ejecucion.mostrarTablaVariables(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable ::= VARIABLE DOSP DOUBLEVARIABLE DOSP DOSP ID MENORQ GUION funciones END PYC 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		funciones.Ejecucion.tablaVariables.put(variable.toString(), val.toString() ); funciones.Ejecucion.mostrarTablaVariables(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funciones ::= MEDIA PAR_IZQUIERDO CORIZQ listaValores CORDER PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 RESULT = funciones.Statistics.Media(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funciones ::= MEDIANA PAR_IZQUIERDO CORIZQ listaValores CORDER PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 RESULT = funciones.Statistics.Mediana(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funciones ::= MODA PAR_IZQUIERDO CORIZQ listaValores CORDER PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 RESULT = funciones.Statistics.Moda(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funciones ::= VARIANZA PAR_IZQUIERDO CORIZQ listaValores CORDER PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 RESULT = funciones.Statistics.Varianza(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funciones ::= MAX PAR_IZQUIERDO CORIZQ listaValores CORDER PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 RESULT = funciones.Statistics.Max(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funciones ::= MIN PAR_IZQUIERDO CORIZQ listaValores CORDER PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 RESULT = funciones.Statistics.Min(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funciones ::= MEDIA PAR_IZQUIERDO expresion PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Statistics.Media(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funciones ::= MEDIANA PAR_IZQUIERDO expresion PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Statistics.Mediana(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funciones ::= MODA PAR_IZQUIERDO expresion PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Statistics.Moda(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funciones ::= VARIANZA PAR_IZQUIERDO expresion PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Statistics.Varianza(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funciones ::= MAX PAR_IZQUIERDO expresion PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Statistics.Max(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funciones ::= MIN PAR_IZQUIERDO expresion PAR_DERECHO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Statistics.Min(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listaValores ::= expresion COMA listaValores 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaValores ::= operaciones COMA listaValores 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaValores ::= funciones COMA listaValores 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaValores ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaValores ::= operaciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                  LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaValores ::= funciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                  LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arrays ::= IDARROBA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = funciones.Ejecucion.tablaVariables.get(val.toString()); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("arrays",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arrays ::= CORIZQ listaValores CORDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = val; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("arrays",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = funciones.Ejecucion.tablaVariables.get(val.toString()); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= IDARROBA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = funciones.Ejecucion.tablaVariables.get(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciones ::= SUMA PAR_IZQUIERDO operaciones COMA operaciones PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaciones ::= RESTA PAR_IZQUIERDO operaciones COMA operaciones PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciones ::= MULTIPLICACION PAR_IZQUIERDO operaciones COMA operaciones PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operaciones ::= DIVISION PAR_IZQUIERDO operaciones COMA operaciones PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operaciones ::= MOD PAR_IZQUIERDO operaciones COMA operaciones PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciones ::= SUMA PAR_IZQUIERDO valor COMA operaciones PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciones ::= RESTA PAR_IZQUIERDO valor COMA operaciones PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciones ::= MULTIPLICACION PAR_IZQUIERDO valor COMA operaciones PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operaciones ::= DIVISION PAR_IZQUIERDO valor COMA operaciones PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operaciones ::= MOD PAR_IZQUIERDO valor COMA operaciones PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operaciones ::= SUMA PAR_IZQUIERDO operaciones COMA valor PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operaciones ::= RESTA PAR_IZQUIERDO operaciones COMA valor PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operaciones ::= MULTIPLICACION PAR_IZQUIERDO operaciones COMA valor PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operaciones ::= DIVISION PAR_IZQUIERDO operaciones COMA valor PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operaciones ::= MOD PAR_IZQUIERDO operaciones COMA valor PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operaciones ::= SUMA PAR_IZQUIERDO valor COMA valor PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operaciones ::= RESTA PAR_IZQUIERDO valor COMA valor PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones ::= MULTIPLICACION PAR_IZQUIERDO valor COMA valor PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operaciones ::= DIVISION PAR_IZQUIERDO valor COMA valor PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operaciones ::= MOD PAR_IZQUIERDO valor COMA valor PAR_DERECHO 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = funciones.Arithmetic.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = funciones.Ejecucion.tablaVariables.get(val); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor ::= funciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // imp ::= ENTERO COMA imp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("imp",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // imp ::= CADENA COMA imp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("imp",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // imp ::= ID COMA imp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst((String)funciones.Ejecucion.tablaVariables.get(val)); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("imp",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // imp ::= funciones COMA imp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("imp",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // imp ::= operaciones COMA imp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("imp",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // imp ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("imp",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // imp ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("imp",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // imp ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add((String)funciones.Ejecucion.tablaVariables.get(val)); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("imp",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // imp ::= funciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("imp",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // imp ::= operaciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("imp",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
