// ------------  Paquete e importaciones ------------
package DATA_analisis;

import java_cup.runtime.*;
import java.util.LinkedList;
import funciones.*;
import Reportes.ErroresLex;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public String resultado = ""; 
    public static LinkedList<ErroresLex> errorsitos = new LinkedList<ErroresLex>();
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: no se espera "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            errorsitos.add(new ErroresLex("Error Sintactico" ,s.value + "",  (s.right ) + 1, (s.left) + 1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            errorsitos.add(new ErroresLex("Error Sintactico" , s.value + "",  (s.right ) + 1, (s.left) + 1));
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String EXCL, PAR_DERECHO, PAR_IZQUIERDO, PYC;
terminal String ENTERO, CADENA, ID, DECIMAL;
terminal String COMA, IGUAL;
terminal String VARIABLE, DOUBLEVARIABLE, DOSP, MENORQ, END, GUION, PROGRAM, ENDPROGRAM, MAYORQ; 
terminal String MAS, CHARVAR, CORIZQ, CORDER, ARROBA, IDARROBA;
terminal String SUMA, RESTA, MULTIPLICACION, DIVISION, MOD;
terminal String MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN, PRINT, CONSOLE, COLUMN;

//------> Declaración de no terminales
non terminal inicio;
non terminal listainstr,  listaValores;
non terminal instruccion, expresion, operaciones, funciones;
non terminal printN, variable, valor, imp, arrays;

//------> PRECEDENCIA
precedence left MAS;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= PROGRAM listainstr ENDPROGRAM
;

listainstr ::= listainstr instruccion
    | instruccion
;

instruccion ::= printN
    | variable
    |funciones
    | error PYC
;


//Para imprimer en consola

printN ::= CONSOLE DOSP DOSP PRINT IGUAL imp:val  END PYC    {: funciones.Ejecucion.Print(val); :} 
          |CONSOLE DOSP DOSP COLUMN IGUAL expresion:variable GUION MAYORQ arrays:val  END PYC    {: funciones.Ejecucion.PrintArr(val, variable.toString()); :}
        
; 

//Asignaciones de variales
variable ::= VARIABLE DOSP DOUBLEVARIABLE DOSP DOSP  ID:variable MENORQ GUION expresion:val END PYC     
    {:funciones.Ejecucion.tablaVariables.put(variable.toString(), val.toString());  :}
    | VARIABLE DOSP CHARVAR CORIZQ CORDER DOSP DOSP ID:variable MENORQ GUION expresion:val END PYC
      {:funciones.Ejecucion.tablaVariables.put(variable.toString(), val.toString()); :}
    | ARROBA DOSP DOUBLEVARIABLE DOSP DOSP IDARROBA:variable MENORQ GUION CORIZQ listaValores:val CORDER END PYC
      {:funciones.Ejecucion.tablaVariables.put(variable.toString(), (LinkedList<Double>)  val); funciones.Ejecucion.mostrarTablaVariables();:}
    | ARROBA DOSP DOUBLEVARIABLE DOSP DOSP IDARROBA:variable MENORQ GUION  expresion:val END PYC
      {:funciones.Ejecucion.tablaVariables.put(variable.toString(), (LinkedList<Double>)  val); funciones.Ejecucion.mostrarTablaVariables();:}
    | ARROBA DOSP CHARVAR CORIZQ CORDER DOSP DOSP IDARROBA:variable MENORQ GUION CORIZQ listaValores:val CORDER END PYC
      {:funciones.Ejecucion.tablaVariables.put(variable.toString(), (LinkedList<String>) val); funciones.Ejecucion.mostrarTablaVariables(); :}
    | ARROBA DOSP CHARVAR CORIZQ CORDER DOSP DOSP IDARROBA:variable MENORQ GUION  expresion:val  END PYC
      {:funciones.Ejecucion.tablaVariables.put(variable.toString(), (LinkedList<String>) val); funciones.Ejecucion.mostrarTablaVariables(); :}
    | VARIABLE DOSP DOUBLEVARIABLE DOSP DOSP ID:variable MENORQ GUION operaciones:val END PYC
      {:funciones.Ejecucion.tablaVariables.put(variable.toString(), val.toString() ); funciones.Ejecucion.mostrarTablaVariables(); :}
    | VARIABLE DOSP DOUBLEVARIABLE DOSP DOSP ID:variable MENORQ GUION funciones:val END PYC
      {:funciones.Ejecucion.tablaVariables.put(variable.toString(), val.toString() ); funciones.Ejecucion.mostrarTablaVariables(); :}
;


//funciones de estadistica

funciones ::= MEDIA PAR_IZQUIERDO CORIZQ listaValores:val CORDER PAR_DERECHO {: RESULT = funciones.Statistics.Media(val); :}
            | MEDIANA PAR_IZQUIERDO CORIZQ listaValores:val CORDER PAR_DERECHO {: RESULT = funciones.Statistics.Mediana(val); :}
            | MODA PAR_IZQUIERDO CORIZQ listaValores:val CORDER PAR_DERECHO {: RESULT = funciones.Statistics.Moda(val); :}
            | VARIANZA PAR_IZQUIERDO CORIZQ listaValores:val CORDER PAR_DERECHO {: RESULT = funciones.Statistics.Varianza(val); :}
            | MAX PAR_IZQUIERDO CORIZQ listaValores:val CORDER PAR_DERECHO {: RESULT = funciones.Statistics.Max(val); :}
            | MIN PAR_IZQUIERDO CORIZQ listaValores:val CORDER PAR_DERECHO {: RESULT = funciones.Statistics.Min(val); :}
            | MEDIA PAR_IZQUIERDO  expresion:val  PAR_DERECHO {: RESULT = funciones.Statistics.Media(val); :}
            | MEDIANA PAR_IZQUIERDO  expresion:val  PAR_DERECHO {: RESULT = funciones.Statistics.Mediana(val); :}
            | MODA PAR_IZQUIERDO  expresion:val  PAR_DERECHO {: RESULT = funciones.Statistics.Moda(val); :}
            | VARIANZA PAR_IZQUIERDO  expresion:val  PAR_DERECHO {: RESULT = funciones.Statistics.Varianza(val); :}
            | MAX PAR_IZQUIERDO  expresion:val  PAR_DERECHO {: RESULT = funciones.Statistics.Max(val); :}
            | MIN PAR_IZQUIERDO  expresion:val  PAR_DERECHO {: RESULT = funciones.Statistics.Min(val); :}
;


//Usado para los arrays
listaValores ::=  expresion:val COMA listaValores:resto
               {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}
    
    | operaciones:val COMA listaValores:resto
                {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}
    | funciones:val COMA listaValores:resto
                {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}

    | expresion:val
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
    | operaciones:val                 {:
                  LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
    | funciones:val
                {:
                  LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
;

//Usado para la impresion de arrays

    arrays::= IDARROBA:val {: RESULT = funciones.Ejecucion.tablaVariables.get(val.toString()); :}
             |CORIZQ listaValores:val CORDER {: RESULT = val; :}
        
;



//No terminal de las expresiones utilizadas para la declaracion de variables y de arryas 
expresion ::= ENTERO:val    {: RESULT = val.toString(); :}
        | CADENA: val       {: RESULT = val.toString(); :}
        | DECIMAL:val       {: RESULT = val.toString(); :}
        | ID:val            {: RESULT = funciones.Ejecucion.tablaVariables.get(val.toString()); :}
        | IDARROBA:val            {: RESULT = funciones.Ejecucion.tablaVariables.get(val); :}
           
;




//tiene las operaciones aritmeticas completas scon las anidaciones que pueden haber 

operaciones ::=SUMA PAR_IZQUIERDO operaciones:val1 COMA operaciones:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | RESTA PAR_IZQUIERDO operaciones:val1 COMA operaciones:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MULTIPLICACION PAR_IZQUIERDO operaciones:val1 COMA operaciones:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | DIVISION PAR_IZQUIERDO operaciones:val1 COMA operaciones:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MOD PAR_IZQUIERDO operaciones:val1 COMA operaciones:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | SUMA PAR_IZQUIERDO valor:val1 COMA operaciones:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | RESTA PAR_IZQUIERDO valor:val1 COMA operaciones:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MULTIPLICACION PAR_IZQUIERDO valor:val1 COMA operaciones:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | DIVISION PAR_IZQUIERDO valor:val1 COMA operaciones:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MOD PAR_IZQUIERDO valor:val1 COMA operaciones:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | SUMA PAR_IZQUIERDO operaciones:val1 COMA valor:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | RESTA PAR_IZQUIERDO operaciones:val1 COMA valor:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MULTIPLICACION PAR_IZQUIERDO operaciones:val1 COMA valor:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | DIVISION PAR_IZQUIERDO operaciones:val1 COMA valor:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MOD PAR_IZQUIERDO operaciones:val1 COMA valor:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | SUMA PAR_IZQUIERDO valor:val1 COMA valor:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | RESTA PAR_IZQUIERDO valor:val1 COMA valor:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MULTIPLICACION PAR_IZQUIERDO valor:val1 COMA valor:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | DIVISION PAR_IZQUIERDO valor:val1 COMA valor:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MOD PAR_IZQUIERDO valor:val1 COMA valor:val2 PAR_DERECHO {: RESULT = funciones.Arithmetic.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
;


//utilizado en las operaciones y funciones cuando solo se quieren datos simples sin anidar

valor ::=ENTERO:val {: RESULT = val.toString(); :}
        | ID: val {: RESULT = funciones.Ejecucion.tablaVariables.get(val); :}
        |funciones:val {: RESULT = val.toString(); :}
       
;

//Para la impresion de los datos simples

imp ::= ENTERO:val COMA  imp:resto
                {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}
        |CADENA:val COMA imp:resto
                {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}
        | ID:val COMA imp:resto
                {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst((String)funciones.Ejecucion.tablaVariables.get(val)); 
                   RESULT = resultado;
               :}

        

        |funciones:val COMA imp:resto
               {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}
        |operaciones:val COMA imp:resto
               {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}

        |ENTERO:val
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
        |CADENA:val
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
        | ID:val
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add((String)funciones.Ejecucion.tablaVariables.get(val)); 
                   RESULT = resultado;
               :}
        |funciones:val
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
        |operaciones:val 
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
;


               

